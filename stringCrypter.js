// stringCrypter.js
// JavaScript implementation for string encryption/decryption

const STATIC_KEY = "test_key";
const SALT_LENGTH_BYTES = 16; // 16 bytes = 32 hex characters

/**
 * Generates a random salt of 16 bytes and returns it as a 32-character hex string.
 * @returns {string} Hex-encoded salt.
 */
function generateSalt() {
    let salt = '';
    const characters = '0123456789abcdef';
    for (let i = 0; i < SALT_LENGTH_BYTES * 2; i++) {
        salt += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return salt;
}

/**
 * Performs XOR operation between two strings. Treats characters as their ASCII values.
 * @param {string} input The input string.
 * @param {string} key The key string.
 * @returns {string} The XORed string.
 */
function xorStrings(input, key) {
    let output = '';
    const keyLength = key.length;
    for (let i = 0; i < input.length; i++) {
        output += String.fromCharCode(input.charCodeAt(i) ^ key.charCodeAt(i % keyLength));
    }
    return output;
}

/**
 * Encrypts plaintext: prepends salt, XORs with key, then Base64 encodes.
 * @param {string} plaintext The string to encrypt.
 * @param {string} key The encryption key.
 * @returns {string} Base64 encoded encrypted string.
 */
function encrypt(plaintext, key) {
    const salt = generateSalt();
    const dataWithSalt = salt + plaintext;
    const xoredData = xorStrings(dataWithSalt, key);
    return btoa(xoredData); // btoa for Base64 encoding
}

/**
 * Decrypts Base64 encoded data: decodes, XORs with key, then removes salt.
 * @param {string} encryptedData Base64 encoded string to decrypt.
 * @param {string} key The decryption key.
 * @returns {string} The original plaintext.
 */
function decrypt(encryptedData, key) {
    const xoredData = atob(encryptedData); // atob for Base64 decoding
    const decryptedWithSalt = xorStrings(xoredData, key);
    return decryptedWithSalt.substring(SALT_LENGTH_BYTES * 2);
}

/**
 * Processes the string for encryption or decryption.
 * @param {string} type 'e' for encrypt, 'd' for decrypt.
 * @param {string} data The string data to process.
 * @returns {string} Encrypted or decrypted string, or error message.
 */
function processString(type, data) {
    const key = STATIC_KEY;
    if (type === 'e') {
        return encrypt(data, key);
    } else if (type === 'd') {
        try {
            return decrypt(data, key);
        } catch (e) {
            // Handle potential errors from atob if input is not valid Base64
            console.error("Decryption error: ", e.message);
            return "Error: Invalid Base64 string or decryption failed.";
        }
    } else {
        return "Error: Invalid type specified. Use 'e' for encrypt or 'd' for decrypt.";
    }
}

// Example Usage (typically run in a browser console or Node.js environment)
function runJsTests() {
    console.log("--- JavaScript String Encryption/Decryption Tests ---");

    const originalText = "Hello from JavaScript!";
    console.log("Original Text: ", originalText);

    const encryptedText = processString('e', originalText);
    console.log("Encrypted Text: ", encryptedText);

    const decryptedText = processString('d', encryptedText);
    console.log("Decrypted Text: ", decryptedText);

    if (decryptedText === originalText) {
        console.log("JavaScript Encryption/Decryption Test: SUCCESSFUL");
    } else {
        console.log("JavaScript Encryption/Decryption Test: FAILED");
        console.log("Expected: ", originalText, "Got: ", decryptedText);
    }

    console.log("\n--- Interoperability Test (JS decrypts PHP) ---");
    // Example: String "Test Interop JS" encrypted by PHP
    // PHP Output: MWQwYzEwMjExMzFkMWMwZjEzMTMxZTAxMGEwZTAxMWMwZkNGY0JZRkRjU0RkREU=
    // (This is a placeholder, actual value needs to be generated by PHP: processString('e', "Test Interop JS"))
    const phpEncrypted = "MWQwYzEwMjExMzFkMWMwZjEzMTMxZTAxMGEwZTAxMWMwZkNGY0JZRkRjU0RkREU="; // Replace with actual PHP output
    const expectedPhpDecryption = "Test Interop JS"; // Replace with actual original text
    
    console.log("PHP Encrypted: ", phpEncrypted);
    const decryptedFromPhp = processString('d', phpEncrypted);
    console.log("Decrypted by JS: ", decryptedFromPhp);

    if (decryptedFromPhp === expectedPhpDecryption) {
        console.log("JS decryption of PHP string: SUCCESSFUL (with correct PHP output)");
    } else {
        console.log("JS decryption of PHP string: FAILED or placeholder data used.");
        console.log("Expected: ", expectedPhpDecryption, "Got: ", decryptedFromPhp);
    }
    console.log("Note: For the PHP interop test to be meaningful, replace 'phpEncrypted' with actual output from your PHP script.");

    console.log("\n--- Interoperability Test (JS encrypts for others) ---");
    const jsEncryptedForOthers = processString('e', "Hello from JS for other languages!");
    console.log("JS Encrypted for others: ", jsEncryptedForOthers);
    console.log("Take this string and try to decrypt it using process_string('d', ...) in other languages.");
}

// To run in Node.js, you might need to polyfill btoa and atob or use Buffer for Base64:
// global.btoa = str => Buffer.from(str, 'binary').toString('base64');
// global.atob = b64Encoded => Buffer.from(b64Encoded, 'base64').toString('binary');
// runJsTests(); // Uncomment to run tests in Node.js environment

// To run in a browser, open an HTML file with this script included and call runJsTests() from the console.
